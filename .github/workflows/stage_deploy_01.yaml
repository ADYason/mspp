name: Stage Deploy

concurrency:
  group: stage_deploy
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - develop
    types: [closed]

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mssp_bot
  DEPLOY_PATH: /MSPP

defaults:
  run:
    working-directory: .

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
    -
      name: Check out the repo
      uses: actions/checkout@v2
    -
      name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11
    -
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
    -
      name: Test with pytest
      run: pytest

  build-and-push-image-to-github-packages:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: develop
      -
        name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GTH_TOKEN }}
      -
        name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile_dev
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:stage,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy changes on server
    runs-on: ubuntu-latest
    environment:
      name: stage_deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: develop
      -
        name: Create folder for application
        run: ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} mkdir -p ${{ env.DEPLOY_PATH }}
      -
        name: Deploy with scp
        run: scp -r infra_deploy/stage/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:${{ env.DEPLOY_PATH }}

      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ env.DEPLOY_PATH }}/stage/
            # PostgreSQL environment variables
            # echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} > .env-stage
            # echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env-stage
            # echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env-stage
            # echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env-stage
            # echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env-stage
            # Django environment variables
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env-stage
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env-stage
            # Secrets variables for google sheets in Django:
            echo GOOGLE_PRIVATE_KEY_ID=${{ secrets.GOOGLE_PRIVATE_KEY_ID }} >> .env-stage
            echo GOOGLE_PRIVATE_KEY=${{ secrets.GOOGLE_PRIVATE_KEY }} >> .env-stage
            # Очистка неиспользуемых контейнеров, образов, сетей
            docker system prune --force
            # Создание сети вынесено отдельно для возможности независимо перезапускать контейнеры (через external networks)
            docker network create stage_db_network || true
            docker network create stage_swag_network || true
            # Установка приложения - backend
            cp -rf ${{ env.DEPLOY_PATH }}/stage/mssp.service /etc/systemd/system/mssp.service
            systemctl daemon-reload
            systemctl restart mssp.service
            # Установка приложения - frontend
            # cp -rf ${{ env.DEPLOY_PATH }}/stage/mssp.service /etc/systemd/system/mssp.service
            # systemctl daemon-reload
            # systemctl restart mssp.service
            # После установки удаляем файлы
            # rm ${{ env.DEPLOY_PATH }}/stage/mssp.service
